// WRP to Find LongestSubstringWithoutRepetingCharacter 

package com;

import java.util.LinkedHashMap;
import java.util.Map;

public class LongestSubstringWithoutRepetingCharacter {
	public static void main(String []args)
	{
		LengthOfLongestSubstring("JAVA");
	}

	public static void LengthOfLongestSubstring(String s) {
		String LongestSubstring = null;
		int LongestSubstringLength = 0;

		Map<Character, Integer> map = new LinkedHashMap<Character, Integer>();
		char[] arr = s.toCharArray();
		for (int i = 0; i < arr.length; i++) {
			char ch = arr[i];
			if (!map.containsKey(ch)) {
				map.put(ch, i);
			}
			else 
			{
				i = map.get(ch);
				map.clear();
			}
			if (map.size() > LongestSubstringLength) {
				LongestSubstringLength = map.size();
				LongestSubstring = map.keySet().toString();
			}
		}
		System.out.println("The Length Of Longest Substring " + LongestSubstring);
		System.out.println("The Length Of Longest Substring Length " + LongestSubstringLength);
	}
}
